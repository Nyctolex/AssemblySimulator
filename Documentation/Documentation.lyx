#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{color}
\usepackage{pythontex}
\usepackage{physics} %abs
\usepackage{esint} % oiint
\end_preamble
\use_default_options true
\begin_modules
todonotes
\end_modules
\maintain_unincluded_children false
\language hebrew
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Segoe WP"
\font_sans "default" "default"
\font_typewriter "default" "Cascadia Mono"
\font_math "auto" "default"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 3cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 3
\tocdepth 1
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagecolor[rgb]{0,0,0} % black
\end_layout

\begin_layout Plain Layout


\backslash
color [rgb]{0.85,0.85,0.85} % white
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout

\lang english
asd
\end_layout

\end_inset


\end_layout

\begin_layout Title
מבנה המחשב - פרויקט - תיעוד
\end_layout

\begin_layout Standard
\begin_inset Flex TODO Note (inline)
status open

\begin_layout Plain Layout
להוסיף תעודות זהות
\end_layout

\end_inset


\end_layout

\begin_layout Section
אסמבלר
\end_layout

\begin_layout Subsection
עיקרון פעולה
\end_layout

\begin_layout Standard
האסמבלר מקבל כקלט קובץ אסמבלי.
 על קובץ זה האסמבלר עובר פעמיים, בפעם הראשונה הוא עובר על כלל הלייבלים ומחליף
 אותם במספר שאותו הם מייצגים, ובמעבר השני מתרגם את קוד האסמבלי לאופקוד המייצג
 אותו.
\end_layout

\begin_layout Subsection

\lang english
dict
\end_layout

\begin_layout Standard
קובץ זה הוא קובץ המשמש כמילון המתרגם סטרינג שבו השם של הרגיסטר או הפקודה,
 למספר המייצג את המספר של הרגיסטר או הפקודה שהוכנסו.
\end_layout

\begin_layout Standard
הגדרות הרגיסטרים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
#define zero "zero"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define imm "imm"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define v0 "v0"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define a0 "a0"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define a1 "a1"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define a2 "a2"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define a3 "a3"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define t0 "t0"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define t1 "t1"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define t2 "t2"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define s0 "s0"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define s1 "s1"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define s2 "s2"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define gp "gp"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define sp "sp"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define ra "ra"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הגדרות הפקודות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
#define word ".word"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define add "add"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define sub "sub"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define mul "mul"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define and "and"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define or "or"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define xor "xor"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define sll "sll"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define sra "sra"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define srl "srl"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define beq "beq"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define bne "bne"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define blt "blt"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define bgt "bgt"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define ble "ble"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define bge "bge"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define jal "jal"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define lw "lw"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define sw "sw"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define reti "reti"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define in "in"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define out "out"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
#define halt "halt"
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
השוואה בין הביטויים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int compare(char *exp) // returns the expression's opcode
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
// * Registers
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (!strcmp(exp, zero)) return 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, imm)) return 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, v0)) return 2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a0)) return 3;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a1)) return 4;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a2)) return 5;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a3)) return 6;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t0)) return 7;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t1)) return 8;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t2)) return 9;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s0)) return 10;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s1)) return 11;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s2)) return 12;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, gp)) return 13;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sp)) return 14;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, ra)) return 15;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
// * OpCodes
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, word)) return -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, add)) return 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sub)) return 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, mul)) return 2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, and)) return 3;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, or)) return 4;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, xor)) return 5;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sll)) return 6;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sra)) return 7;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, srl)) return 8;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, beq)) return 9;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bne)) return 10;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, blt)) return 11;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bgt)) return 12;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, ble)) return 13;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bge)) return 14;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, jal)) return 15;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, lw)) return 16;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sw)) return 17;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, reti)) return 18;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, in)) return 19;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, out)) return 20;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, halt)) return 21;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
label
\end_layout

\begin_layout Standard
קובץ זה מגדיר מבנה נתונים חדש בשם לייבל.
\end_layout

\begin_layout Standard
הגדרת לייבל חדש:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Label *labelNewLabel(char name[], int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *new_label = (Label *)malloc(sizeof(Label));
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (new_label != NULL) // making sure the memory allocation succeed
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_label->name, name);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_label->next = NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_label->location = location;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return new_label;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת הלייבל האחרון:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Label *labelLast(Label *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp->next != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת המידע על הלייבל החדש:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void labelAppendNode(Label *head, Label *node)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *tail = labelLast(head); // get the last node
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
tail->next = node;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
void labelAppendData(Label *head, char name[], int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *new_tail = labelNewLabel(name, location); // creatin a new node
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
labelAppendNode(head, new_tail); // appending it to the end of the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת הלייבל בעזרת האינדקס:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Label *labelGetByIndex(Label *head, int index)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (index < 0) // making sure the index is valid
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < index; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp != NULL) // if we are not out of range
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
מציאת הלייבל בעזרת שמו:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Label *labelGetByName(Label *head, char name[])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (strcmp(temp->name, name))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp == NULL) // while we are no out of range
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
בדיקה האם הלייבל קיים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int labelListContains(Label *head, char name[])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (head != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (strcmp(head->name, name) == 0)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return TRUE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
head = head->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return FALSE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מחיקת הלייבלים בסוף ריצת הקוד:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void labelDeleteList(Label *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *temp; // A pointer to a Label we are going to destroy after updating
 head
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (head != NULL) // Destroy all of the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = head; // temp <-- current node, head <-- head->next
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
head = head->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(temp); // we destroy temp and free the memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הדפסת כל הלייבלים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void labelPrintList(Label *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (head != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("Name: %s
\backslash
n Location:%d
\backslash
n", head->name, head->location);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
head = head->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
Main
\end_layout

\begin_layout Standard
קובץ זה מכיל את הפונקציה הראשית של האסמבלר ואת כל מהלכו.
\end_layout

\begin_layout Standard
ריצת האסמבלר מתחלקת לשני מעברים על הקובץ:
\end_layout

\begin_layout Enumerate
מציאת ושמירת כלל הלייבלים
\end_layout

\begin_layout Enumerate
תרגום האופקודים, הרגיסטרים והלייבלים, ושמירתם בסטרינג ארוך שמייצג את
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
memin
\end_layout

\begin_layout Standard
לאחר שני המעברים הללו הסטרינג נכתב בקובץ
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
memin
\lang hebrew
.
\end_layout

\begin_layout Standard
הגדרות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
# define MAX_LINE_SIZE 501
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
# define GET_LABEL 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
# define TRANSLATE_ITER 1
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
# define MAX_MEMIN_SIZE 4096
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
# define TRUE 1
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
# define FALSE 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int memin_loc = 0;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
בדיקה האם ההוראה היא
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
I-Type
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
או
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
R-Type
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int is_imm(char *line) // checks if the line has an imm (not in the 1st
 reg)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int counter = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int jump = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i = 0; i < MAX_LINE_SIZE; i++) // for every char in the line
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (i == 0)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (isalpha(line[i])) counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (line[i] == '$' && isspace(line[i-1])) counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'e' && line[i+2] == 'q') jump=1; // if
 the op is beq
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'n' && line[i+2] == 'e') jump=1; // if
 the op is bne
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'l' && line[i+2] == 't') jump=1; // if
 the op is blt
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'g' && line[i+2] == 't') jump=1; // if
 the op is bgt
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'l' && line[i+2] == 'e') jump=1; // if
 the op is ble
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'b' && line[i+1] == 'g' && line[i+2] == 'e') jump=1; // if
 the op is bge
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 's' && line[i+1] == 'w') jump=1; // if the op is sw
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'o' && line[i+1] == 'u' && line[i+2] == 't') jump=1; // if
 the op is out
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'i' && line[i+1] == 'm' && line[i+2] == 'm' && counter !=
 2) return TRUE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == 'i' && line[i+1] == 'm' && line[i+2] == 'm' && counter ==
 2 && jump == 1) return TRUE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
// if (line[i] == 'i' && line[i+1] == 'm' && line[i+2] == 'm' && counter
 == 1) return FALSE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return FALSE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת לייבל חדש:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void add_label(char *line, int line_loc, Label *label_list) // add new label
 to the label list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char label [MAX_LINE_SIZE] = "";
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int counter = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i = 0; line[i] != ':'; i++) // iterate until ":"
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (isspace(line[i])) counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else label[i-counter] = line[i];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
labelAppendData(label_list, label, line_loc); // add label to list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
חיפוש לייבל:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int search_label(char *line, int line_index, int line_loc, Label *label_list)
 // iterate a line and check if there is a label in it,
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i = 0; i < MAX_LINE_SIZE; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == '
\backslash
0' || line[i] == '
\backslash
n') break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == ':')
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
add_label(line, line_loc, label_list); // if the line has ":" add the label
 to the list with it's location
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return --line_loc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (is_imm(line)) line_loc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return line_loc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת המידע ל-
\lang english
memin
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void add_to_memin_str(char *temp_str, char *memin_str, int size, int place)
 // add string to the memin string
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (size == 5 || size == 2)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; i<size; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_str[memin_loc*6+i] = temp_str[i]; // add the string to it's place
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (size == 5) memin_loc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (size == 1)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_str[memin_loc*6+place+1] = temp_str[0]; // add the string to it's
 place
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (place == 3) memin_loc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ריפוד באפסים 
\backslash
 באחדות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int extend_sign(int num) // extend sign of the number
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int mask_extend = 0xFFF00000; //sign externtion
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int mask_msb = 0x80000; // mast to determine the msb
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int sign = mask_msb & num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//if the msb is not 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (sign > 0) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
num = mask_extend | num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת המידע של הפקודה
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
.word
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void add_word(char *line, char *memin_str) // add .word data to memin
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int line_loc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char line_val[MAX_LINE_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char temp_var[MAX_LINE_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int counter = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int j = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int hex = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i = 0; i < MAX_LINE_SIZE; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == '.') // skip the "word" and move to the rest of the line
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
i += 4;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
continue;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (isalnum(line[i]))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] == '0' && (line[i+1] == 'x' || line[i+1] == 'X')) // if the
 number is hex
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
hex = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp_var[j] = line[i]; // save the var's chars in string
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (isspace(line[i+1]) || (line[i+1] == '
\backslash
0')) // when the number ends
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (counter == 0) // line place
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (hex == 1) line_loc = extend_sign(strtoul(temp_var, NULL, 16));
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else line_loc = atoi(temp_var);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
j = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
hex = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
continue;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (counter == 1) // line data
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp_var[j+1] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (hex == 1)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int k = 2; k < 7; k++) line_val[k - 2] = temp_var[k]; // remove "0x"
 from data
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int len = strlen(line_val);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (len < 5) // zero padding
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int l=0; l<5-len; l++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int k=0; k<5; k++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line_val[5-k] = line_val[5-k-1];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int k=0; k<5-len; k++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line_val[k] = '0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else sprintf(line_val, "%05X", atoi(temp_var));
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
j++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((line[i] == '#') || (line[i] == '
\backslash
n') || (line[i] == '
\backslash
0')) break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (isspace(line[i])) continue;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int memin_loc_temp = memin_loc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_loc = line_loc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
add_to_memin_str(line_val, memin_str, 5, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_loc = memin_loc_temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
תרגום קוד האסמבלי:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
void translate_file(char *line, int line_index, int line_loc, Label *label_list,
 FILE *memin, char *memin_str) // switch asm with it's opcode
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
char var[MAX_LINE_SIZE] = "";
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int counter = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int len = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int hex;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int hex_num = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
Label *label;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
char temp_str[7];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
char temp_char[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int not_imm = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
for (int i = 0; i < strlen(line); i++) // check if the imm is hex
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if ((line[i] == '0') && (line[i+1] == 'x' || line[i+1] == 'X'))
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
hex_num = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
for (int i = 0; i < strlen(line); i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (line[i] == ':') return; // skip label line
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if (counter == 4 && isalpha(line[i]) && hex_num != 1) // translate
 label
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
for (int j=i; !isspace(line[j]); j++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[len] = line[j];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[++len] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
label = labelGetByName(label_list, var);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_str, "%05X", label -> location);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_str, memin_str, 5, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if (line[i] == ',' || line[i] == '$' || line[i] == '#' || line[i] ==
 '
\backslash
n' || i == strlen(line)-1) // translate name
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (i == strlen(line)-1) // if the line is finished close the var
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[len] = line[i];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[++len] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (var[0] == '0' && (var[1] == 'x' || var[1] == 'X') && not_imm == 0) //
 translate hex imm num
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
strcpy(temp_str, var+sizeof(char)*2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int number = (int)strtoul(temp_str, NULL, 16);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_str, "%05X", number&0x000FFFFF);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_str, memin_str, 5, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if ((isdigit(var[0]) || (var[0] == '-')) && atoi(var) != 0 && not_imm
 == 0) // translate dec imm num
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_str, "%05X", atoi(var)&0x000FFFFF);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_str, memin_str, 5, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if (is_imm(line) && atoi(var) == 0 && counter == 4 && not_imm == 0)
 // translate 0 imm num
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_str, "%05X", atoi(var));
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_str, memin_str, 5, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if (strlen(var) != 0 && !isdigit(var[0])) // translate opcodes and
 regs
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
hex = compare(var);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (hex == -1) // if the opcode is ".word"
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_word(line, memin_str);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (counter == 0) // translate opcode
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_str, "%02X", hex);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_str, memin_str, 2, 0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else // translate reg
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if ((hex == 1) && (counter == 1)) not_imm = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if ((hex == 1) && (counter != 1)) not_imm = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
sprintf(temp_char, "%01X", hex);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_to_memin_str(temp_char, memin_str, 1, counter);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[0] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
len = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if ((line[i] == '#') || (line[i] == '
\backslash
n')) break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else if (isspace(line[i])) continue;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[len] = line[i];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
var[++len] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מעבר על כלל השורות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void iter_lines(FILE *fp, char iter_type, Label *label_list, FILE *memin,
 char *memin_str) // iterate over all the lines in the file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE *asm_file = fp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char line [MAX_LINE_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int line_index = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int line_loc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int is_empty = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (fgets(line, MAX_LINE_SIZE, asm_file))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i = 0; i < strlen(line); i++) // check if line is empty
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (!(line[i] == ' '))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (line[i] != '
\backslash
n' && line[i] != '#') break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
is_empty = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (is_empty == 1)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{ 
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
is_empty = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
continue;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (iter_type == GET_LABEL) line_loc = search_label(line, line_index, line_loc,
 label_list); // iterate and find all labels
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (iter_type == TRANSLATE_ITER) translate_file(line, line_index, line_loc,
 label_list, memin, memin_str); // iterate and translate to hex
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line_index++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line_loc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
} 
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבת המידע לקובץ המוצא בסוף הריצה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_to_file(char *memin_str, FILE *memin) // write output to memin
 file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; i<MAX_MEMIN_SIZE*6-1; i++) fputc(memin_str[i], memin);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
פונקציית ה-
\lang english
main
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int main(int arg_amount, char *arg_vals[])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE *asm_file = fopen(arg_vals[1], "r");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (asm_file)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char memin_str[MAX_MEMIN_SIZE*6+1];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; i<MAX_MEMIN_SIZE*6; i++) // zero the memin_str, and put {Enter}
 after 5 chars
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (((i+1)%6) == 0) memin_str[i] = '
\backslash
n';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else memin_str[i] = '0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_str[0] = '0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
memin_str[MAX_MEMIN_SIZE*6] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE *memin = fopen(arg_vals[2], "w");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Label *label_list = labelNewLabel("", -1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
iter_lines(asm_file, GET_LABEL, label_list, memin, memin_str); // iterate
 and find all labels
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fseek(asm_file, 0, 0); // go to the beginning of the file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
iter_lines(asm_file, TRANSLATE_ITER, label_list, memin, memin_str); // iterate
 and translate to hex
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
write_to_file(memin_str, memin); // write output to memin file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fclose(memin);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
labelDeleteList(label_list); // delete all of the labels
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fclose(asm_file);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Section
סימולטור
\end_layout

\begin_layout Standard
פעולת הסימולטור בוצעה באופן הבא: כלל קבצי הכניסה נכתבו למערכים.
 עבור כל איטרציה נלקחה שורה מקובץ ה-
\lang english
memin
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
ותורגמה לפעולה שיש לבצע ולרגיסטרים שיש לבצע אותה עליהם, ולאחר מכן בוצעה
 הפעולה בהתחשב בתנאים הנתונים )כמו למשל טיימר או כתיבה לדיסק(.
\end_layout

\begin_layout Subsection

\lang english
dict
\end_layout

\begin_layout Standard
גם בסימולטור השתמשנו בקובץ המשמש מילון המתרגם את המספר לרגיסטרים שיש בהם
 שימוש.
\end_layout

\begin_layout Standard
השוואת הרגיסטרים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
if (!strcmp(exp, zero))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 0; 
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, imm_dict))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, v0))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a0))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 3;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a1))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 4;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a2))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 5;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, a3))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 6;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t0))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 7;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t1))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 8;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, t2))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 9;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s0))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 10;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s1))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 11;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, s2))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 12;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, gp))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 13;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sp))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 14;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, ra))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 15;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
השוואת הפעולות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, word))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, add))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sub))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, mul))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, and))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 3;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, or ))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 4;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, xor))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 5;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sll))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 6;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sra))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 7;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, srl))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 8;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, beq))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 9;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bne))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 10;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, blt))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 11;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bgt))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 12;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, ble))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 13;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, bge))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 14;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, jal))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 15;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, lw))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 16;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, sw))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 17;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, reti))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 18;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, in))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 19;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, out))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 20;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (!strcmp(exp, halt))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return 21;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
instruction
\end_layout

\begin_layout Standard
קובץ זה מממש פיצול הקוד של הפקודה לפעולה, הרגיסטרים ומיקומה של הפעולה.
 כאשר כלל הפרמטרים נשמרים במבנה חדש בשם
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
Instruction
\lang hebrew
.
\end_layout

\begin_layout Standard
יצירת הוראה חדשה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* instructionNewinstruction(int opcode, int rd, int rs, int rt,
 int imm, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* new_instruction = (Instruction*)malloc(sizeof(Instruction));
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (new_instruction != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->rt = rt;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->rs = rs;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->rd = rd;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->opcode = opcode;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->imm = imm;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->location = location;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_instruction->next = NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return new_instruction;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת ההוראה על ידי מיקומה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* instructionGetByLocation(Instruction* head, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* temp = head; //temporary node repersenting the current node
 checked.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp->location != location) // while the current node is not the
 one we are searching for
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next; //current node would set to the next node.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp == NULL) //if we got to the last node of the lisr -> exit and return
 null
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת ההוראה האחרונה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* instructionGetByLocation(Instruction* head, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* temp = head; //temporary node repersenting the current node
 checked.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp->location != location) // while the current node is not the
 one we are searching for
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next; //current node would set to the next node.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp == NULL) //if we got to the last node of the lisr -> exit and return
 null
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת מיקום להוראה נוספת:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionAppendNode(Instruction* head, Instruction* node)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* tail = instructionLast(head); //get the last node in the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
tail->next = node; //append the node
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
פענוח סוג ההוראה )
\lang english
I-Type 
\backslash
 R-Type
\lang hebrew
( ממבנה ההוראה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int instructionType(Instruction* inst)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((inst->rd == IMM_REG) && ((beq_opcode <= inst->opcode && inst->opcode
 <= bge_opcode) || inst->opcode==sw_opcode || inst->opcode == out_opcode))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return I_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((inst->rs == IMM_REG) || (inst->rt == IMM_REG)) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return I_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return R_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
פענוח סוג ההוראה משורת ההוראה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int instructionTypeFromLine(char* line)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//if one of the registers in the line is the immidiate register
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rt = slice_atoi_hex(line, 4, 5);//set rt to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rs = slice_atoi_hex(line, 3, 4);//set rs to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rd = slice_atoi_hex(line, 2, 3);//set rd to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int opcode = slice_atoi_hex(line, 0, 2);//set opcode to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((rd == IMM_REG) && ((beq_opcode <= opcode && opcode <= bge_opcode) ||
 opcode == sw_opcode || opcode == out_opcode)) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return I_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((rs == IMM_REG) || (rt == IMM_REG)) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return I_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return R_TYPE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת מידע להוראה חדשה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionAppendData(Instruction* head, int opcode, int rd, int rs,
 int rt, int imm, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//create a new instruction from the given parameters
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* new_tail = instructionNewinstruction(opcode, rd, rs, rt, imm,
 location);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//append the new node
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
instructionAppendNode(head, new_tail);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת הוראה חדשה משורה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionAppendFromLine(Instruction* head, char* line, char* imm_line,
 int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rt = slice_atoi_hex(line, 4, 5); //set rt to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rs = slice_atoi_hex(line, 3, 4); //set rs to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rd = slice_atoi_hex(line, 2, 3); //set rd to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int opcode = slice_atoi_hex(line, 0, 2); //set opcode to to its numeric
 value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int imm = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionTypeFromLine(line) == I_TYPE) // if the instruction is of
 I type
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
imm = extend_sign(strtoul(imm_line, NULL, 16)); //set imm to to its numeric
 value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
instructionAppendData(head, opcode, rd, rs, rt, imm, location); //append
 the list with the new node
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
פענוח ההוראה מהשורה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* instructionFromLine(char* line, char* imm_line, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rt = slice_atoi_hex(line, 4, 5);//set rt to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rs = slice_atoi_hex(line, 3, 4);//set rs to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int rd = slice_atoi_hex(line, 2, 3);//set rd to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int opcode = slice_atoi_hex(line, 0, 2);//set opcode to to its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int imm = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionTypeFromLine(line) == I_TYPE)// if the instruction is of
 I type
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
imm = extend_sign(strtoul(imm_line, NULL, 16));//set imm to to its numeric
 value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
// create a new Instruction node with the given parameters taken from the
 line
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* new_inst = instructionNewinstruction(opcode, rd, rs, rt, imm,
 location);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return new_inst;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
פיצול סטרינג הקסהדצימלי והחזרתו כ-
\lang english
int
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int slice_atoi_hex(char str[], int start, int end)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int len = end - start;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char tmp[LINE_MAX_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strncpy(tmp, str + start, len); //copy the wanted part of the line to tmp
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
tmp[len] = '
\backslash
0'; //add null at the end of the string
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return strtoul(tmp, NULL, 16); //return its numeric value
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ריפוד באפסים 
\backslash
 באחדות:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int extend_sign(int num) // extend sign of the number
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int mask_extend = 0xFFF00000; //sign externtion
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int mask_msb = 0x80000; // mast to determine the msb
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int sign = mask_msb & num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//if the msb is not 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (sign > 0) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
num = mask_extend | num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return num;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
תרגום
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
int
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
לאופקוד:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
char* int_to_opcode(int opcode)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
char* opcode_srt = NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
opcode_srt = (char*)malloc(sizeof(char) * 20);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
switch (opcode)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 0: // add
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, add);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 1: // sub
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, sub);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 2: // mul
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, mul);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 3: // and
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, and);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 4: // or
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, or );
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 5: // xor
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, xor);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 6: // sll
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, sll);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 7: // sra
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, sra);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 8: // srl
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, srl);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 9: // beq
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, beq);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 10: // bne
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, bne);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 11: // blt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, blt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 12: // bgt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, bgt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 13: // ble
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, ble);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 14: // bge
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, bge);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 15: // jal
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, jal);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 16: // lw
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, lw);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 17: // sw
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, sw);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 18: // reti
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, reti);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 19: // in
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, in);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 20: // out
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, out);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case 21: // halt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
strcpy(opcode_srt, halt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
default:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
return opcode_srt;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
תרגום
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
int
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
לרגיסטר:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
char* int_to_reg(int reg)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* reg_srt = (char*)malloc(sizeof(char) * 20);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
switch (reg)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 0:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, zero);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 1:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, imm_dict);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 2:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, v0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 3:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, a0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 4:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, a1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 5:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, a2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 6:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, a3);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 7:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, t0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 8:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, t1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 9:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, t2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 10:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, s0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 11:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, s1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 12:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, s2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 13:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, gp);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 14:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, sp);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
case 15:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(reg_srt, ra);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
default:
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return reg_srt;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
הדפסת הוראה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionPrintInstruction(Instruction* inst)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* opcode = int_to_opcode(inst->opcode);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* rd = int_to_reg(inst->rd);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* rs = int_to_reg(inst->rs);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* rt = int_to_reg(inst->rt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionType(inst) == R_TYPE)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("Location: %d DATA: %s %s %s %s
\backslash
n", inst->location, opcode, rd, rs, rt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("Location: %d DATA: %s %s %s %s Imm: %d
\backslash
n", inst->location, opcode, rd, rs, rt, inst->imm);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(opcode);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(rd);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(rs);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(rt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הדפסת הוראה בהקסה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionPrintInstructionHex(Instruction* inst)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionType(inst) == R_TYPE)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("Location: %d DATA: %X %X %X %X
\backslash
n", inst->location, inst->opcode, inst->rd, inst->rs, inst->rt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("Location: %d DATA: %X %X %X %X Imm: %X
\backslash
n", inst->location, inst->opcode, inst->rd, inst->rs, inst->rt, inst->imm);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מחיקת רשימת ההוראת )בסוף הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void instructionDeleteList(Instruction* head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* temp; // A pointer to a line we are going to destroy after
 updating head
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (head != NULL) // Destroy all of the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = head; // temp <-- current node, head <-- head->next
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
head = head->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(temp); // we destroy temp and free the memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
IO
\end_layout

\begin_layout Standard
קובץ זה מממש את הפעולות עם הכניסות והמוצאים )
\lang english
Inputs 
\backslash
 Outputs
\lang hebrew
( של הסימולטור.
\end_layout

\begin_layout Standard
מימוש הטיימר:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int timer(int ioreg[])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (++ioreg[timercurrent] == ioreg[timermax]) // check if timer is at the
 max val
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[irq0status] = 1; // activate irqstatus0
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[timercurrent] = 0; // zero timer_current
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
קריאת
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
irq
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int irq(int ioreg[], int* pc, int *is_task)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[irqreturn] = *pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
*pc = ioreg[irqhandler];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
*is_task = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
תפעול ה-
\lang english
IO
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
)פונקציית ה-
\lang english
main
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
של הקובץ(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void IO_handler(int ioreg[], int monitor_arr[], char disk_memory[][MAX_DISK_LINE
], int* pc, int* is_task, int irq2[], int *disk_cycle, char memory[LINES_MAX][LI
NES_MAX_SIZE], int *led, FILE *leds_file, FILE *display7seg_file)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[25] != *pc)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[25] = *pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[timerenable] == 1) // if the timer is enabled
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
timer(ioreg); // update processor time
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int is_irq2 = in_irq2(ioreg,irq2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (*is_task != 1) // if in task
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((ioreg[irq0enable] && ioreg[irq0status]) || (ioreg[irq1enable] && ioreg[irq1
status]) || (ioreg[irq2enable] && (is_irq2 == 1)))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
irq(ioreg, pc, is_task);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
monitor(monitor_arr, ioreg);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
disk_command(ioreg, disk_memory, disk_cycle, memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
led_write(ioreg, led, leds_file, pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
display7seg_write(display7seg_file, ioreg, pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת תוכן קובץ
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
irq2
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
למערך המתאר את האינדקסים שבהם יש לקרוא לפסיקה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void IO_handler(int ioreg[], int monitor_arr[], char disk_memory[][MAX_DISK_LINE
], int* pc, int* is_task, int irq2[], int *disk_cycle, char memory[LINES_MAX][LI
NES_MAX_SIZE], int *led, FILE *leds_file, FILE *display7seg_file)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[25] != *pc)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[25] = *pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[timerenable] == 1) // if the timer is enabled
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
timer(ioreg); // update processor time
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int is_irq2 = in_irq2(ioreg,irq2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (*is_task != 1) // if in task
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((ioreg[irq0enable] && ioreg[irq0status]) || (ioreg[irq1enable] && ioreg[irq1
status]) || (ioreg[irq2enable] && (is_irq2 == 1)))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
irq(ioreg, pc, is_task);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
monitor(monitor_arr, ioreg);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
disk_command(ioreg, disk_memory, disk_cycle, memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
led_write(ioreg, led, leds_file, pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
display7seg_write(display7seg_file, ioreg, pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
בדיקה האם בפעולה הנוכחית פסיקה
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
2
\family roman
\series medium
\shape up
\size normal
\emph off
\numeric off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
פועלת:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int in_irq2(int ioreg[], int *irq2) // check if the pc should raise irq2status
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; irq2[i] != -1; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if(ioreg[clks] == *(irq2+i)) return(1);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return(0);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת ערכים למוניטור:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void monitor(int monitor_arr[], int ioreg[]) // print to monitor
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[monitorcmd] == 1)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
monitor_arr[ioreg[monitoraddr]] = ioreg[monitordata];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[monitorcmd] = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
תפעול )קריאה וכתיבה( של הדיסק:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void disk_command(int ioreg[], char disk_memory[][MAX_DISK_LINE], int *disk_cycl
e, char memory[LINES_MAX][LINES_MAX_SIZE]) // write to or read from disk
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int is_full = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((ioreg[diskcmd] != 0) && (*disk_cycle == 0)) // if there is a disk cmd
 and the disk is available
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[diskstatus] == 0) // if disk is not busy
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
*disk_cycle = 1024;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[diskstatus] = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[diskcmd] == 1) // read sector
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; i<128; i++) strcpy(memory[ioreg[diskbuffer]+i], disk_memory[ioreg[
disksector]*SECTOR_SIZE+i]); // read from disk
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (ioreg[diskcmd] == 2) // write sector
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (int i=0; i<128; i++) 
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(disk_memory[ioreg[disksector]*SECTOR_SIZE+i], memory[ioreg[diskbuffer]+i]
); // write to disk
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (*disk_cycle > 1) 
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
*disk_cycle = *disk_cycle - 1; // if the disk is not available decrease
 1 from cycles until available
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else if (*disk_cycle == 1) // declare the disk as available next cycle
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[diskcmd] = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[diskstatus] = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[irq1status] = 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
*disk_cycle = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
כתיבה לקובץ הלדים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void led_write(int ioreg[], int *led, FILE *leds_file, int *pc)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[leds] != ioreg[23])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[23] = ioreg[leds];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(leds_file, "%d %08X
\backslash
n", ioreg[clks], ioreg[23]); // write to leds
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה ל-
\lang english
trace
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
של רגיסטרי החומרה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
void hwregtrace_write(FILE *fp, int cycle, int read_write, int reg_num,
 int data) // write hwregtrace file
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
unsigned int data_unsigned = (unsigned) data;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
char action[6] = {0};
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
char reg_name[50] = {0};
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
if (read_write == 0) sprintf(action, "READ");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
else if (read_write == 1) sprintf(action, "WRITE");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
switch(reg_num)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq0enable:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq0enable");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq1enable:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq1enable");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq2enable:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq2enable");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq0status:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq0status");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq1status:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq1status");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irq2status:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irq2status");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irqhandler:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irqhandler");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case irqreturn:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "irqreturn");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case clks:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "clks");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case leds:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "leds");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case display7seg:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "display7seg");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case timerenable:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "timerenable");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case timercurrent:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "timercurrent");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case timermax:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "timermax");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case diskcmd:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "diskcmd");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case disksector:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "disksector");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case diskbuffer:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "diskbuffer");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case diskstatus:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "diskstatus");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case reserved1:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "reserved");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case reserved2:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "reserved");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case monitoraddr:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "monitoraddr");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case monitordata:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "monitordata");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
case monitorcmd:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
sprintf(reg_name, "monitorcmd");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
fprintf(fp, "%d %s %s %08X
\backslash
n", cycle-1, action, reg_name, data_unsigned); // print to file
\end_layout

\begin_layout Plain Layout

\family typewriter
\size footnotesize
\lang english
}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה לתצוגת
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
7seg
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void display7seg_write(FILE *display7seg_file, int ioreg[], int *pc) //
 write to display7seg file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (ioreg[display7seg] != ioreg[24])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(display7seg_file, "%d %08X
\backslash
n", ioreg[clks], ioreg[display7seg]); // print to file
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[24] = ioreg[display7seg];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
line
\end_layout

\begin_layout Standard
בקובץ זה מומשו פונקציות שתומכות בקריאת השורה ופיצולה לסטרינגים המייצגים
 את הרגיסטרים והפעולות שיש לבצע ברגיסטרים.
 הפונקציות שהוגדרו בקובץ זה הוגדרו עבור המבנה החדש: שורה.
\end_layout

\begin_layout Standard
יצירת שורה חדשה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Line *lineNewLine(char opcode[], char rd[], char rs[], char rt[], char imm[],
 int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *new_line = (Line *)malloc(sizeof(Line));
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (new_line != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_line->rt, rt);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_line->rs, rs);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_line->rd, rd);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_line->opcode, opcode);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(new_line->imm, imm);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_line->location = location;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
new_line->next = NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return new_line;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת השורה מהאינדקס:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Line *lineGetByIndex(Line *head, int index)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (index < 0)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return NULL;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < index; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת שורה ממיקומה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Line *lineGetByLocation(Line *head, int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp->location != location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (temp == NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מציאת השורה האחרונה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Line *lineLast(Line *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *temp = head;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp->next != NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return temp;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הוספת שורה חדשה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void lineAppendNode(Line *head, Line *node)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *tail = lineLast(head);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
tail->next = node;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *lineAppendData(Line *head, char opcode[], char rd[], char rs[], char
 rt[], char imm[], int location)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *new_tail = lineNewLine(opcode, rd, rs, rt, imm, location);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
lineAppendNode(head, new_tail);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מחיקת רשימת השורות )בסוף הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void lineDeleteList(Line *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *temp; // A pointer to a line we are going to destroy after updating
 head
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (head != NULL) // Destroy all of the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = head; // temp <-- current node, head <-- head->next
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
head = head->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
free(temp); // we destroy temp and free the memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
בדיקה האם השורה היא
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
I-Type
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
int lineIsImmidiate(Line *line)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
// if one of the registers is the imm register.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((strcmp(IMM_REG, line->rs) == 0) || (strcmp(IMM_REG, line->rd) == 0)
 || (strcmp(IMM_REG, line->rt) == 0))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return TRUE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return FALSE;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
חישוב מיקום השורה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void lineCalculateLocation(Line *head)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int counter = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Line *temp = head; // line pointer to the current line struct.
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (temp != NULL) // Destroy all of the list
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp->location = counter;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (lineIsImmidiate(temp))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
counter += 2;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
counter++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
temp = temp->next;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\lang english
Simulator
\end_layout

\begin_layout Standard
קובץ זה מכיל את המהלך הכולל של הסימולטור.
\end_layout

\begin_layout Standard
פונקציית ה-
\lang english
main
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\lang hebrew
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
של הסימולטור:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int main(int argc, char* argv[])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//allocating a pointer to each file we would use later
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
FILE* fp_memin = NULL, * fp_diskin = NULL, * fp_irq2in = NULL, * fp_memout
 = NULL,
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
* fp_regout = NULL, * fp_trace = NULL, * fp_hwregtrace = NULL, * fp_cycles
 = NULL, * fp_leds = NULL, * fp_display7seg = NULL,
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
* fp_diskout = NULL, * fp_monitor_txt = NULL, * fp_monitor_yuv;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//an array of all file pointers
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
FILE** file_pointers[] = { NULL, &fp_memin, &fp_diskin, &fp_irq2in, &fp_memout,
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
&fp_regout, &fp_trace, &fp_hwregtrace, &fp_cycles, &fp_leds, &fp_display7seg,
 &fp_diskout, &fp_monitor_txt, &fp_monitor_yuv };
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//used for saving data for the irq2 handler
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int irq2[200];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int disk_cycle = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//used for saving data for the disk handler
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int* disk_cycle_ptr = &disk_cycle;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int is_in_task = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
const int output_file_index = 4; // All file after this inex are output
 files
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
// arrays which would represent the register of the proccessor and the io
 registers
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int regs[NUM_REGS] = { 0 }, ioreg[NUM_IOREGS+5] = { 0 };
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
char memory[MAX_LINES][LINE_MAX_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//setting all lines to 000
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
reset_memory(memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
char disk_memory[NUM_SECTORS * NUM_SECTOR_LINES][MAX_DISK_LINE_LEN];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//setting all lines to 000
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
reset_disk_memory(disk_memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int monitor[MONITOR_SIZE * MONITOR_SIZE] = { 0 };
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int pc = 0, irq = 0, busy_with_interruption = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (argc != NUM_COMMANDLINE_PARAMETERS) // check the number command line
 arguments
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
printf("Error: Incorrect command line arguments number
\backslash
n");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return 1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
// opening the input files
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
for (i = 1; i < output_file_index; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
*file_pointers[i] = fopen(argv[i], "r");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (*(file_pointers[i]) == NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
printf("Error: The file %s couldn't open properly", argv[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
// opening the output files without yuv file
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
for (i = i; i < argc - 1; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
*file_pointers[i] = fopen(argv[i], "w");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (*(file_pointers[i]) == NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
printf("Error: The file %s couldn't open properly", argv[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//open yuv in binary
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
*file_pointers[i] = fopen(argv[i], "wb");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
if (*(file_pointers[i]) == NULL)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
printf("Error: The file %s couldn't open properly", argv[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//reading the fp_irq2in file to irq2 array
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
add_irq2(fp_irq2in, irq2);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//reading the memory from the input file into memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
read_memory(fp_memin, memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//reading the memory from the input file into disk memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
read_disk_memory(fp_diskin, disk_memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//run the instructions
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
run_instructions(regs, ioreg, file_pointers, memory, &is_in_task, irq2,
 monitor, disk_memory, disk_cycle_ptr);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//writing to the output files
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_cycles(fp_cycles, ioreg[CLK_REG]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_regout(fp_regout, regs);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_memout(fp_memout, memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_diskout(fp_diskout, disk_memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_monitor_txt(fp_monitor_txt, monitor);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
write_monitor_yuv(fp_monitor_yuv, monitor);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
//close all opened files
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
close_pf(file_pointers, NUM_COMMANDLINE_PARAMETERS);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
return 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size scriptsize
\lang english
}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
סגירת כל הקבצים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void close_pf(FILE** file_pointers[], int argc)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 1; i < argc; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fclose(*file_pointers[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
מעבר למחזור השעון הבא:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void next_cycle(int* ioreg, int monitor[], char disk_memory[][MAX_DISK_LINE_LEN]
, int* pc_pointer, int* is_in_task, int irq2[], char memory[][LINE_MAX_SIZE],
 FILE** file_pointers[], int* disk_cycle_ptr) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
ioreg[CLK_REG] = ioreg[CLK_REG] % 0xffffffff + 1; //update the value of
 the cycle counter
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int led = ioreg[LEDS_REG];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE* leds_file = *file_pointers[LEDS];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE* display7seg_file = *file_pointers[DISPLAY7SEG];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
IO_handler(ioreg, monitor, disk_memory, pc_pointer, is_in_task, irq2, disk_cycle
_ptr, memory, led, leds_file, display7seg_file);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
איפוס הזיכרון )בתחילת הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void reset_memory(char memory[][LINE_MAX_SIZE]) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < MAX_LINES; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(memory[i], "00000");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
איפוס זיכרון הדיסק )בתחילת הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void reset_disk_memory(char disk_memory[][MAX_DISK_LINE_LEN]) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < NUM_SECTORS * NUM_SECTOR_LINES; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(disk_memory[i], "00000");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
קריאת הזיכרון )בתחילת הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void read_memory(FILE* fp_memin, char memory[][LINE_MAX_SIZE])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int pc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int next_pc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char curent_inst[LINE_MAX_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char imm_line[LINE_MAX_SIZE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (fgets(curent_inst, LINE_MAX_SIZE, fp_memin))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
pc = next_pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
curent_inst[strcspn(curent_inst, "
\backslash
r
\backslash
n")] = '
\backslash
0'; // remove 
\backslash
n and 
\backslash
r
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(memory[next_pc], curent_inst);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
next_pc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
קריאת הדיסק )בתחילת הריצה(:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void read_disk_memory(FILE* fp_diskin, char disk_memory[][MAX_DISK_LINE_LEN])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char line[MAX_DISK_LINE_LEN];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (fgets(line, MAX_DISK_LINE_LEN, fp_diskin))
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line[strcspn(line, "
\backslash
r
\backslash
n")] = '
\backslash
0'; // remove 
\backslash
n and 
\backslash
r
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
strcpy(disk_memory[i], line);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
i++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
קריאת ההוראה הנוכחית:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* read_instruction(int pc, char memory[][LINE_MAX_SIZE])
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* curent_inst = memory[pc];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char* imm_line = memory[pc];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionTypeFromLine(curent_inst) == I_TYPE)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
imm_line = memory[pc + 1];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
return instructionFromLine(curent_inst, imm_line, pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הדפסת מצב הרגיסטרים:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void print_reg_state(int pc, int* reg, Instruction* inst)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
const int reg_num = 16;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char reg_name[][20] = { "zero", "imm", "v0", "a0", "a1", "a2", "a3", "t0",
 "t1", "t2", "s0", "s1", "s2", "gp", "sp", "ra" };
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("PC:%d ", pc);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < reg_num; i++)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (i == inst->rd || i == inst->rs || i == inst->rt) // if the register
 is used in this instruction, print it in red
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("
\backslash
033[031m");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("%s:%d ", reg_name[i], reg[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("
\backslash
033[0m"); //resum non color printing
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
printf("
\backslash
n");
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבת מחזורי השעון:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_cycles(FILE* fp_cycles, int* cycles)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_cycles, "%u", cycles);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה לקובץ
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
המוצא
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
\lang english
regout
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_regout(FILE* fp_regout, int* reg)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int R0 = reg[0], R1 = reg[1], R2 = reg[2], R3 = reg[3], R4 = reg[4], R5
 = reg[5], R6 = reg[6], R7 = reg[7], R8 = reg[8], R9 = reg[9], R10 = reg[10],
 R11 = reg[11], R12 = reg[12], R13 = reg[13], R14 = reg[14], R15 = reg[15];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_regout, 
\size footnotesize
"%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n%08X
\backslash
n",
\size default
 R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבת קובץ ה-
\lang english
trace
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_trace(FILE* fp_trace, int pc,char memory[][LINE_MAX_SIZE], int*
 regs)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int R0 = regs[0], R1 = regs[1], R2 = regs[2], R3 = regs[3], R4 = regs[4],
 R5 = regs[5], R6 = regs[6], R7 = regs[7], R8 = regs[8], R9 = regs[9], R10
 = regs[10], R11 = regs[11], R12 = regs[12], R13 = regs[13], R14 = regs[14],
 R15 = regs[15];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_trace, "%03X %s %08X %08X %08X %08X %08X %08X %08X %08X %08X
 %08X %08X %08X %08X %08X %08X %08X
\backslash
n", pc, memory[pc], R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12,
 R13, R14, R15);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבת קובץ ה-
\lang english
memout
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_memout(FILE* fp_memout, char memory[][LINE_MAX_SIZE]) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
char line_str[6];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int line;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < MAX_LINES; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line = strtoul(memory[i], NULL, 16) & 0xFFFFF;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_memout, "%05X
\backslash
n", line);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה למוניטור:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_monitor_txt(FILE* fp_monitor_txt, int monitor[MONITOR_SIZE *
 MONITOR_SIZE]) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < MONITOR_SIZE * MONITOR_SIZE; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_monitor_txt, "%02X
\backslash
n", monitor[i] & 0xFF);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה לקובץ הבינארי של המוניטור:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_monitor_yuv(FILE* fp_monitor_yuv, int monitor[MONITOR_SIZE *
 MONITOR_SIZE]) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int chars[2];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < MONITOR_SIZE * MONITOR_SIZE; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_monitor_yuv, "%c", monitor[i]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
כתיבה לקובץ ה-
\lang english
diskout
\lang hebrew
:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void write_diskout(FILE* fp_diskout, char disk_memory[][MAX_DISK_LINE_LEN])
 {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int i = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int line;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
for (i = 0; i < NUM_SECTORS * NUM_SECTOR_LINES; i++) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
line = strtoul(disk_memory[i], NULL, 16);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
fprintf(fp_diskout, "%05X
\backslash
n", line & 0x000FFFFF);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
פענוח ההוראה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
void decode_inst(int* regs, int* ioreg, Instruction* inst, char memory[][LINE_MA
X_SIZE], int* pc_pointer, int* is_in_task, int irq2[], int monitor[], char
 disk_memory[][MAX_DISK_LINE_LEN], FILE** file_pointers[], int* disk_cycle_ptr)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
int io_target_reg;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
switch (inst->opcode)
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 0: // add
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] + regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 1: // sub
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] - regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 2: // mul
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] * regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 3: // and
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] & regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 4: // or
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] | regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 5: // xor
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] ^ regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 6: // sll
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] << regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 7: // sra
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = regs[inst->rs] >> regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 8: // srl
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rt] < 0) {
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = (regs[inst->rs] >> regs[inst->rt]); // if its actualy a
 left shift
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = ((regs[inst->rs] & 0x000FFFFF) >> regs[inst->rt]); // get
 red of sign extentions
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 9: // beq
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] == regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 10: // bne
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] != regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 11: // blt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] < regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
else
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 12: // bgt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] > regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 13: // ble
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] <= regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 14: // bge
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (regs[inst->rs] >= regs[inst->rt])
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 15: // jal
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = *pc_pointer;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = regs[inst->rs];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 16: // lw
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = extend_sign(strtoul(memory[regs[inst->rs] + regs[inst->rt]],
 NULL, 16));
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
//next_clk;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 17: // sw
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
sprintf(memory[regs[inst->rs] + regs[inst->rt]], "%05X", regs[inst->rd]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
//next_clk;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 18: // reti
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*is_in_task = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = ioreg[IRQRETURN_REG];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 19: // in
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
io_target_reg = regs[inst->rs] + regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
if (inst->rd <= IMM_REG) // wrting to REG0 or REG IMM
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break; //dont update target register's value
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
regs[inst->rd] = ioreg[io_target_reg];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
hwregtrace_write(*file_pointers[HWREGTRACE], ioreg[CLK_REG], inst->opcode
 == 20, io_target_reg, ioreg[io_target_reg]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 20: // out
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
io_target_reg = regs[inst->rs] + regs[inst->rt];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
ioreg[io_target_reg] = regs[inst->rd];
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
hwregtrace_write(*file_pointers[HWREGTRACE], ioreg[CLK_REG], inst->opcode
 == 20, io_target_reg, regs[inst->rd]);
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
case 21: // halt
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
break;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
default:
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
printf("Unrecognized command, exiting simulation
\backslash
n");
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
*pc_pointer = -1;
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\size tiny
\lang english
}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigbreak
\end_layout

\end_inset


\end_layout

\begin_layout Standard
הרצת ההוראה:
\end_layout

\begin_layout Standard

\lang english
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\lang english
void run_instructions(int regs[NUM_REGS], int* ioreg, FILE** file_pointers[],
 char memory[][LINE_MAX_SIZE], int* is_in_task, int irq2[], int monitor[],
 char disk_memory[][MAX_DISK_LINE_LEN], int* disk_cycle_ptr)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
FILE* fp_trace = *file_pointers[TRACE];
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int pc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int* pc_pointer = &pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int old_pc = pc;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
int temp_pc = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
Instruction* current_instruction;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
while (pc != -1)
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
{
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//fetch instruction from memory
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
current_instruction = read_instruction(pc, memory);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
regs[ZERO_REG] = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
regs[IMM_REG] = 0;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionType(current_instruction) == I_TYPE) regs[IMM_REG] = current_inst
ruction->imm;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
//Write Trace
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
write_trace(*file_pointers[TRACE], *pc_pointer, memory, regs);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
pc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionType(current_instruction) == I_TYPE)pc++;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
decode_inst(regs, ioreg, current_instruction, memory, pc_pointer, is_in_task,
 irq2, monitor, disk_memory, file_pointers, disk_cycle_ptr);
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
next_clk;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if (instructionType(current_instruction) == I_TYPE) next_clk;
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
if ((current_instruction->opcode == 16) || (current_instruction->opcode
 == 17)) next_clk; //if it is sw or lw
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\begin_layout Plain Layout

\family typewriter
\lang english
}
\end_layout

\end_inset


\end_layout

\begin_layout Section
קבצי האסמבלי
\end_layout

\begin_layout Subsection

\lang english
sort
\end_layout

\begin_layout Standard
בקובץ זה מופיע קוד האסמבלי הממיין מערך של
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
16
\family roman
\series medium
\shape up
\size normal
\emph off
\numeric off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
מספרים.
\end_layout

\begin_layout Subsection

\lang english
binom
\end_layout

\begin_layout Standard
בקובץ זה מופיע קוד האסמבלי המחשב את תוצאת הנוסחה המתמטית של הבינום של ניוטון
 באופן רקורסיבי.
\end_layout

\begin_layout Subsection

\lang english
triangle
\end_layout

\begin_layout Standard
בקובץ זה מופיע קוד האסמבלי המצייר על המוניטור משולש ישר זווית כאשר נתונים
 לו שלושת הקודקודים של המשולש.
\end_layout

\begin_layout Subsection

\lang english
disktest
\end_layout

\begin_layout Standard
בקובץ זה מופיע קוד האסמבלי הסוכם
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
את
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\numeric on
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
7
\family roman
\series medium
\shape up
\size normal
\emph off
\numeric off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
הסקטורים הראשונים של הדיסק וכותב את הסכום לסקטור ה-
\numeric on
8
\family roman
\series medium
\shape up
\size normal
\emph off
\numeric off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
 
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
של הדיסק.
\end_layout

\end_body
\end_document
